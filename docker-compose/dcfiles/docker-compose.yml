version: '3'
services:
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
    image: grafana/loki:2.8.3
    container_name: loki-read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      training:
        aliases:
          - loki

  write:
    image: grafana/loki:2.8.3
    command: "-config.file=/etc/loki/config.yaml -target=write"
    container_name: loki-write
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.8.3
    container_name: promtail
    volumes:
      - ../observability/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000"
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    container_name: gateway
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  mysql:
    image: mysql:8.0.27
    container_name: mysql
    hostname: mysql
    restart: always
    environment:
      - DATABASE_HOST=docker-mysql
      - DATABASE_PORT=3306
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=attendancedb
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=root
    ports:
      - "3306:3306"
    extends:
      file: common-config.yml
      service: network-deploy-service
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 20s
      retries: 10

  mongodb:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    restart: always
    #healthcheck:
    #  test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/mydb --quiet
    #  interval: 10s
    #  timeout: 10s
    #  retries: 5
    environment:
      #- MONGO_DATA_DIR=/data/db
      #- MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_DATABASE=mydb1
    ports:
      - "27017:27017"
    #command: mongod
    volumes:
      - mongo-data:/data/db
    extends:
      file: common-config.yml
      service: network-deploy-service

  eurekaserver:
    image: "training/eurekaserver:S1"
    container_name: eurekaserver
    ports:
      - "8761:8761"
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      #start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
    extends:
      file: common-config.yml
      service: network-deploy-service

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "AttendanceTopic"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 5s
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  employee-attendance:
    image: "training/employee-attendance:S1"
    container_name: employee-attendance-ms
    ports:
      - "8091:8091"
    depends_on:
      eurekaserver:
        condition: service_healthy
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8091/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      #start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "employee-attendance"
      OTEL_SERVICE_NAME: "employee-attendance"
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/attendancedb?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false&enabledTLSProtocols=TLSv1.2
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: root
      bootstrap.servers: kafka:29092
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  attendance-store:
      image: "training/attendance-store:S1"
      container_name: attendance-store-ms
      ports:
        - "8092:8092"
      depends_on:
        eurekaserver:
          condition: service_healthy
        #mongo:
        #  condition: service_healthy
        kafka:
          condition: service_healthy
      healthcheck:
        test: "curl --fail --silent localhost:8092/actuator/health/readiness | grep UP || exit 1"
        interval: 20s
        timeout: 5s
        retries: 20
      environment:
        SPRING_APPLICATION_NAME: "attendance-store"
        OTEL_SERVICE_NAME: "attendance-store"
        SPRING_APPLICATION_JSON: '{
                  "spring.data.mongodb.uri" : "mongodb://mongodb:27017/mydb1",
                  "eureka.client.serviceUrl.defaultZone" : "http://eurekaserver:8761/eureka"
                }'
        bootstrap.servers: kafka:29092
      extends:
        file: common-config.yml
        service: microservice-eureka-config

  gatewayserver:
    image: "training/gatewayserver:S1"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    depends_on:
      employee-attendance:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      OTEL_SERVICE_NAME: "gatewayserver"
      #SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
      SPRING_APPLICATION_JSON: '{
                        "spring.security.oauth2.resourceserver.jwt.jwk-set-uri" : "http://keycloak:8080/realms/master/protocol/openid-connect/certs",
                        "eureka.client.serviceUrl.defaultZone" : "http://eurekaserver:8761/eureka"
                      }'
    extends:
      file: common-config.yml
      service: microservice-eureka-config

networks:
  training:
    driver: "bridge"

volumes:
  mongo-data: